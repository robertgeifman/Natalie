//
//  Natalie.swift
//  Natalie
//
//  Created by Marcin Krzyzanowski on 07/08/16.
//  Copyright © 2016 Marcin Krzyzanowski. All rights reserved.
//

import Foundation

@discardableResult
func += (_ array: inout [String], _ value: String) -> [String] {
	array.append(value)
	return array
}

@discardableResult
func += (_ array: inout [String], _ value: [String]) -> [String] {
	array.append(contentsOf: value)
	return array
}

struct Natalie {
	struct Header: CustomStringConvertible {
		var description: String {
			var output = String()
			output += "//\n"
			output += "// Autogenerated by Natalie - Storyboard Generator\n"
			output += "// by Marcin Krzyzanowski http://krzyzanowskim.com\n"
			output += "// Copyright © 2016 Marcin Krzyzanowski. All rights reserved.\n"
			output += "//\n"
			output += "//  Adjusted to the needs of specific projects by Robert Geifman in 2018\n"
			output += "//\n"
			return output
		}
	}

	let storyboards: [StoryboardFile]
	let header = Header()

	var storyboardCustomModules: Set<String> {
		Set(storyboards.lazy.flatMap { $0.storyboard.customModules })
	}

	init(storyboards: [StoryboardFile]) {
		self.storyboards = storyboards
		assert(Set(storyboards.map { $0.storyboard.os }).count < 2)
	}

	static func process(storyboards: [StoryboardFile]) -> [String] {
		var output = [String]()
		for os in OS.allValues {
			let storyboardsForOS = storyboards.filter { $0.storyboard.os == os }
			if !storyboardsForOS.isEmpty {

				if storyboardsForOS.count != storyboards.count {
					output += "#if os(\(os.rawValue))"
				}

				output += Natalie(storyboards: storyboardsForOS).process(os: os)

				if storyboardsForOS.count != storyboards.count {
					output += "#endif"
				}
			}
		}
		return output
	}

	func process(os: OS) -> [String] {
		var output = [String]()
		var customModules = Set<String>()
		for file in storyboards {
			output += os == .OSX ?
				file.storyboard.processViewControllersMac(storyboardCustomModules: &customModules) :
				file.storyboard.processViewControllers(storyboardCustomModules: &customModules)
		}
	
		output += "// MARK: - Storyboard"
		output += "enum Storyboards {"
		for file in storyboards {
			output += file.storyboard.processStoryboard(storyboardName: file.storyboardName, os: os)
		}
		output += "}"

		let colors = storyboards
			.flatMap { $0.storyboard.colors }
			.filter { $0.catalog != .system }
			.compactMap { $0.assetName }

		if !colors.isEmpty {
			output += ""
			output += "// MARK: - Colors"
			output += "@available(\(os.colorOS), *)"
			output += "extension \(os.colorType) {"
			for colorName in Set(colors) {
				output += "\tstatic let \(swiftRepresentation(for: colorName, firstLetter: .none)) = \(os.colorType)(named: \(initIdentifier(for: os.colorNameType, value: colorName)))"
			}
			output += "}"
		}

		var prefixedOutput = [String]()

		prefixedOutput += header.description
		prefixedOutput += "import \(os.framework)"
		prefixedOutput += "import NatalieSupport"
		
		customModules.formUnion(storyboardCustomModules)
		for module in customModules {
			prefixedOutput += "import \(module)"
		}
		prefixedOutput += ""
		prefixedOutput.append(contentsOf: output)
		return prefixedOutput
	}
}
