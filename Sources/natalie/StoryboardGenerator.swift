//
//  Natalie.swift
//  Natalie
//
//  Created by Marcin Krzyzanowski on 07/08/16.
//  Copyright Â© 2016 Marcin Krzyzanowski. All rights reserved.
//

import Foundation

struct Natalie {
	struct Header: CustomStringConvertible {
		var description: String {
			var output = String()
			output += "//\n"
			output += "// Autogenerated by Natalie - Storyboard Generator\n"
			output += "// by Marcin Krzyzanowski http://krzyzanowskim.com\n"
			output += "//\n"
			return output
		}
	}

	let storyboards: [StoryboardFile]
	let header = Header()

	var storyboardCustomModules: Set<String> {
		return Set(storyboards.lazy.flatMap { $0.storyboard.customModules })
	}

	init(storyboards: [StoryboardFile]) {
		self.storyboards = storyboards
		assert(Set(storyboards.map { $0.storyboard.os }).count < 2)
	}

	static func process(storyboards: [StoryboardFile]) -> String {
		var output = String()
		for os in OS.allValues {
			let storyboardsForOS = storyboards.filter { $0.storyboard.os == os }
			if !storyboardsForOS.isEmpty {

				if storyboardsForOS.count != storyboards.count {
					output += "#if os(\(os.rawValue))\n"
				}

				output += Natalie(storyboards: storyboardsForOS).process(os: os)

				if storyboardsForOS.count != storyboards.count {
					output += "#endif\n"
				}
			}
		}
		return output
	}

	func process(os: OS) -> String {
		var output = ""

		output += header.description
		output += "import \(os.framework)\n"
		for module in storyboardCustomModules {
			output += "import \(module)\n"
		}
		output += "\n"

		let storyboardModules = storyboardCustomModules
		for file in storyboards {
			output += file.storyboard.processViewControllers(storyboardCustomModules: storyboardModules)
		}

		output += "\n////////////////////////////////////////////////////////////\n"
		output += "enum Storyboards {\n"
		for file in storyboards {
			output += file.storyboard.processStoryboard(storyboardName: file.storyboardName, os: os)
		}
		output += "}\n"
		output += "\n"

		let colors = storyboards
			.flatMap { $0.storyboard.colors }
			.filter { $0.catalog != .system }
			.compactMap { $0.assetName }
		if !colors.isEmpty {
			output += "// MARK: - Colors\n"
			output += "@available(\(os.colorOS), *)\n"
			output += "extension \(os.colorType) {\n"
			for colorName in Set(colors) {
				output += "\tstatic let \(swiftRepresentation(for: colorName, firstLetter: .none)) = \(os.colorType)(named: \(initIdentifier(for: os.colorNameType, value: colorName)))\n"
			}
			output += "}\n"
			output += "\n"
		}

		if let reusableViews = os.resuableViews {
			for reusableView in reusableViews {
				output += "extension \(reusableView): ReusableViewProtocol {\n"
				output += "\tpublic var viewType: UIView.Type? { return type(of: self) }\n"
				output += "\tpublic var storyboardIdentifier: String? { return self.reuseIdentifier }\n"
				output += "}\n"
				output += "\n"
			}
		}

		return output
	}
}
